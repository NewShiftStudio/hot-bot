import { differenceInCalendarDays } from 'date-fns';
import { Telegram } from 'telegraf';
import { User } from '../common/entities/User';
import { userService } from '../common/services/user.service';
import { AppDataSource } from '../database/appDataSourse';

const token = process.env.USER_BOT_TOKEN;
if (!token) {
  throw new Error('BOT_TOKEN must be provided!');
}

type Notification = {
  user: User;
  text: string;
};

const NOTIFICATION_30_DAYS =
  '–ï—Å—Ç—å –ø–ª–∞–Ω—ã –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ? –í–∞—à –±–∞–ª–∞–Ω—Å: 350. –ù–æ–≤—ã–π –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –º–µ—Å—è—Ü, —á—Ç–æ–±—ã –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å —Å–µ–±—è. –ñ–¥–µ–º –≤–∞—Å –Ω–∞ –≥–∞—Å—Ç—Ä–æ—Ç–µ—Ä–∞–ø–∏—é –≤ est. 1993 üå≠\n\n–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ –ø–æ –Ω–æ–º–µ—Ä–∞–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —Ç—É—Ç üëáüèº\n\nEst1993.ru';

const NOTIFICATION_60_DAYS =
  '–í–∏–¥–∏–º, —á—Ç–æ –¥–∞–≤–Ω–æ —É –Ω–∞—Å –Ω–µ –±—ã–ª–∏.. –ó–∞—Ö–æ–¥–∏—Ç–µ! üíÉ –î–∞—Ä–∏–º 200 –±–∞–ª–ª–æ–≤ –∑–∞ –≤–µ—Ä–Ω–æ—Å—Ç—å. –≠—Ç–∏ –±–∞–ª–ª—ã —Å–≥–æ—Ä—è—Ç —á–µ—Ä–µ–∑ 4 –¥–Ω—è, —É—Å–ø–µ–π –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å!\n\n–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ –ø–æ –Ω–æ–º–µ—Ä–∞–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —Ç—É—Ç üëáüèº\n\nEst1993.ru';

const telegram = new Telegram(token);

async function notifyUsers() {
  const usersList = await userService.getAll({
    step: 'registered',
  });
  const today = new Date();

  const usersToNotify = usersList.reduce<Notification[]>((acc, user) => {
    if (!user.lastOrderDate) return acc;
    const daysFromLastOrder = differenceInCalendarDays(
      today,
      user.lastOrderDate,
    );
    if (daysFromLastOrder <= 0) return acc;
    switch (daysFromLastOrder) {
      case 30:
        acc.push({
          user,
          text: NOTIFICATION_30_DAYS,
        });
        return acc;
      case 60:
        acc.push({
          user,
          text: NOTIFICATION_60_DAYS,
        });
        return acc;
      default:
        return acc;
    }
  }, []);

  usersToNotify.forEach((notification) => {
    try {
      notifyUser(notification.user.chatId, notification.text);
      console.log(
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å tgId ${notification.user.telegramId} –æ–ø–æ–≤–µ—â–µ–Ω`,
      );
    } catch (error) {
      console.log(
        `–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å tgId ${notification.user.telegramId}}`,
      );
      console.log(error);
    }
  });
}

async function notifyUser(userChatId: number, text: string) {
  return await telegram.sendMessage(userChatId, text);
}

async function bootstrap() {
  try {
    await AppDataSource.initialize();
    console.log('Data source for notifications initialized');
    await notifyUsers();
  } catch (error) {
    console.log(error);
  }
}

bootstrap();
