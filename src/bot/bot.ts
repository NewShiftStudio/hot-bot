import { Context, Markup, Telegraf } from 'telegraf';
import { questions } from './questions';
import { userService } from '../common/services/user.service';
import { validateDateOfBirth } from '../helpers/dobValidator';
import { validatePhoneNumber } from '../helpers/phoneValidation';
import { ValidationResult } from '../@types/entities/ValidationResult';

import dotenv from 'dotenv';
import { getDeclensionWordByCount } from '../helpers/wordHelper';
dotenv.config();

const token = process.env.BOT_TOKEN;

if (!token) {
  throw new Error('BOT_TOKEN must be provided!');
}

export const bot = new Telegraf(token);

const SHOW_BALANCE_TEXT = 'üí∞ –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å';
const SPEND_TEXT = 'üí≥ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–ª–ª—ã';

bot.hears(SHOW_BALANCE_TEXT, showBalance);
bot.command('balance', spend);

bot.hears(SPEND_TEXT, spend);
bot.command('spend', spend);

bot.start(async ctx => {
  const telegramId = ctx.message.from.id;
  const user = await userService.getByTelegramId(telegramId);
  const chatId = ctx.message.chat.id;
  if (!user) {
    ctx.reply(
      '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ hot-bot.\n\n–≠—Ç–æ –±–æ—Ç —Å–æ —Å–∫–∏–¥–æ—á–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏.\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏'
    );
    await userService.create({ telegramId, chatId, step: 'firstName' });
    const firstQuestion = questions.firstName.label;
    return ctx.reply(firstQuestion);
  }

  if (user.step !== 'registered') {
    return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é');
  }

  return ctx.reply(
    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ hot-not! ',
    Markup.keyboard([[SHOW_BALANCE_TEXT, SPEND_TEXT]])
      .oneTime()
      .resize()
  );
});

bot.command('delete', async ctx => {
  const telegramId = ctx.message.from.id;
  try {
    await userService.delete(telegramId);
    ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã', Markup.removeKeyboard());
  } catch (error) {
    console.log(error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
  }
});

bot.on('text', async ctx => {
  const telegramId = ctx.message.from.id;
  const user = await userService.getByTelegramId(telegramId);
  if (!user) return;

  const step = user.step;
  if (step === 'registered') {
    return;
  }
  const answer = ctx.message.text;
  const question = questions[step];

  const validationResult = await validateStep(step, answer);

  if (validationResult.status !== 'success') {
    return ctx.reply(validationResult.message);
  }

  if (!question) {
    console.error(
      `–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ ${step}`
    );
    return ctx.reply('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
  }

  const nextStep = question.nextStep;

  if (!nextStep) {
    console.error(
      `–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–∞–ø –ø–æ—Å–ª–µ ${step}`
    );
    return ctx.reply('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
  }

  try {
    await userService.update(telegramId, {
      [step]: answer,
      step: nextStep,
    });
  } catch (error) {
    console.log(error);
    return ctx.reply(
      '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'
    );
  }

  if (nextStep === 'registered') {
    await userService.setCard(user.id);
    await userService.update(telegramId, { balance: 200 });
    await ctx.reply('‚úÖ –°–∫–∏–¥–æ—á–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞');
    await ctx.reply(
      '‚ùóÔ∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å iiko –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü–æ –ø–ª–∞–Ω—É –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∫–∞—Ä—Ç–∞. –¢–µ–ø–µ—Ä—å –≤—Å–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ iiko –∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å.\n\nP.S. –°–µ–π—á–∞—Å –æ–Ω –∑–∞–º–æ–∫–∞–Ω'
    );
    return ctx.reply(
      '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!\n\n–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 200 –±–æ–Ω—É—Å–æ–≤ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å, –Ω–∞–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É /balance',
      Markup.keyboard([[SHOW_BALANCE_TEXT, SPEND_TEXT]])
        .oneTime()
        .resize()
    );
  }

  return ctx.reply(questions[nextStep].label);
});

async function validateStep(
  stepName: string,
  answer: string
): Promise<ValidationResult> {
  switch (stepName) {
    case 'dateOfBirth':
      return validateDateOfBirth(answer);
    case 'phoneNumber':
      const user = await userService.findOneByPhone(answer);
      if (!user) return validatePhoneNumber(answer);
      return {
        status: 'error',
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!',
      };
    default:
      return {
        status: 'success',
        message: '',
      };
  }
}

async function showBalance(ctx: any) {
  const telegramId = ctx.message.from.id;
  const user = await userService.getByTelegramId(telegramId);
  if (!user)
    return ctx.reply(
      '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'
    );
  return ctx.replyWithMarkdown(
    `–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–∞—à –±–∞–ª–∞–Ω—Å: _${user.balance} ${getDeclensionWordByCount(
      user.balance,
      ['–±–∞–ª–ª–æ–≤', '–±–∞–ª–ª', '–±–∞–ª–ª–∞']
    )}_.`
  );
}

async function spend(ctx: any) {
  const telegramId = ctx.message.from.id;
  const user = await userService.getByTelegramId(telegramId);
  if (!user)
    return ctx.reply('–î–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–ª–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è');
  await userService.update(telegramId, { balance: 0 });
  return ctx.replyWithPhoto(
    'https://images.unsplash.com/photo-1573865526739-10659fec78a5?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=830&q=80',
    {
      caption: `–û—Ç–ª–∏—á–Ω–æ! –î–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–ª–æ–≤ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç –±–∞—Ä-–∫–æ–¥ –≤–∞—à–µ–º—É –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—É\n\ncardNumber: ${user.card.cardNumber}\nbarCodeFile: ${user.card.barCodeLink}`,
    }
  );
}
