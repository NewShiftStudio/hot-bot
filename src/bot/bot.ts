import { Context, Markup, Telegraf, Telegram } from 'telegraf';
import { registrationQuestions } from '../constants/registrationQuestions';
import { userService } from '../common/services/user.service';
import { validateDateOfBirth } from '../helpers/dobValidator';
import { validatePhoneNumber } from '../helpers/phoneValidation';
import { ValidationResult } from '../@types/entities/ValidationResult';

import dotenv from 'dotenv';
import { getDeclensionWordByCount } from '../helpers/wordHelper';
import { postService } from '../common/services/post.service';
import { User } from '../common/entities/User';
import { iikoApi } from '../api/iikoApi';
import {
  ConsentStatus,
  CreateUserDto,
  SEX,
} from '../@types/dto/user/create.dto';
import { formatDateToIiko } from '../helpers/formatDate';
import { interviewService } from '../common/services/interview.service';
import { interviewQuestions } from '../constants/interviewQuestions';
import { Interview } from '../common/entities/Interview';
dotenv.config();

const userToken = process.env.USER_BOT_TOKEN;

if (!userToken) {
  throw new Error('USER_BOT_TOKEN must be provided!');
}

export const bot = new Telegraf(userToken);
const telegram = new Telegram(userToken);

const HELLO_MESSAGE_TEXT =
  '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç Est. 1993.\n\n–≠—Ç–æ –±–æ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏. –° –µ–≥–æ –ø–æ–º–æ—â—å—é –≤—ã —Å–º–æ–∂–µ—Ç–µ –∫–æ–ø–∏—Ç—å –±–∞–ª–ª—ã –∏ —Ç—Ä–∞—Ç–∏—Ç—å –∏—Ö –Ω–∞ –Ω–∞—à–∏ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ —Ö–æ—Ç-–¥–æ–≥–∏.\n\n–ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å. –≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ –±–æ–ª—å—à–µ –¥–≤—É—Ö –º–∏–Ω—É—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.';
const END_REGISTRATION_TEXT =
  '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É –Ω–∞—Å—Ç–æ—è—â–∏—Ö –≥–µ–¥–æ–Ω–∏—Å—Ç–æ–≤! –î–∞—Ä–∏–º –≤–∞–º 200 –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤. –û–ø–ª–∞—á–∏–≤–∞–π—Ç–µ –∏–º–∏ 50% –æ—Ç –≤–∞—à–µ–≥–æ —á–µ–∫–∞! üî•\n\n–ö—Å—Ç–∞—Ç–∏, –∑–∞–±—ã–ª–∏ —Å–∫–∞–∑–∞—Ç—å, –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–æ–ª–∏–∫–∞ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É ¬´eat in est¬ª  –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–µ—Ç –∏–∑ –Ω–∞—à–∏—Ö –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã—Ö —Ç–∞–ø–∞—Å–æ–≤! –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ –ø–æ –Ω–æ–º–µ—Ä–∞–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —Ç—É—Ç üëáüèº\n\nEst1993.ru';
const SHOW_BALANCE_TEXT = 'üí∞ –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å';
const SPEND_TEXT = 'üí≥ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–ª–ª—ã';
const MINUTE = 60 * 1000;

bot.hears(SHOW_BALANCE_TEXT, showBalance);
bot.command('balance', showBalance);

bot.hears(SPEND_TEXT, sendBarCode);
bot.command('spend', sendBarCode);

bot.start(async ctx => {
  const telegramId = ctx.message.from.id;

  const user = await userService.getByTelegramId(telegramId);
  if (!user) {
    return ctx.reply(
      HELLO_MESSAGE_TEXT,
      Markup.inlineKeyboard([
        Markup.button.callback('–î–∞–≤–∞–π—Ç–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã', 'register'),
      ])
    );
  }

  if (user.step !== 'registered') {
    return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é');
  }

  return ctx.reply(
    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ hot-not! ',
    Markup.keyboard([[SHOW_BALANCE_TEXT, SPEND_TEXT]])
      .oneTime()
      .resize()
  );
});

bot.command('delete', async ctx => {
  const telegramId = ctx.message.from.id;
  try {
    await userService.delete(telegramId);
    ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã', Markup.removeKeyboard());
  } catch (error) {
    console.log(error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
  }
});

bot.command('/registerAdmin', async ctx => {
  if (
    ctx.message.text.slice(14).trim() !== process.env.REGISTER_ADMIN_PASSWORD
  ) {
    return;
  }

  const telegramId = ctx.from.id;

  try {
    await userService.update(telegramId, {
      isAdmin: true,
    });
    return ctx.reply(
      '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n–°–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /createPost\n–ü–æ–ª—É—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥–æ—Ä–æ–¥–∞–º /cityStats'
    );
  } catch (error) {
    console.log(error);
    return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–æ–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏');
  }
});

bot.command('/cityStats', async ctx => {
  const telegramId = ctx.from.id;
  const user = await userService.getByTelegramId(telegramId);

  if (!user?.isAdmin) return;

  const stats = await userService.getCityStats();

  ctx.reply(
    `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total}\n–ú–æ—Å–∫–≤–∞: ${stats.msk}\n–°–ü–±: ${stats.spb}`
  );
});

bot.command('/createPost', async ctx => {
  const telegramId = ctx.from.id;

  const user = await userService.getByTelegramId(telegramId);
  if (!user || !user.isAdmin) return;

  const postsList = await postService.getAll({
    creatorTelegramId: telegramId,
  });

  await Promise.all(
    postsList.map(async post => await postService.delete(post.id))
  );

  await postService.create({
    creatorTelegramId: telegramId,
    fileIds: '',
  });

  return ctx.reply(
    'üì¢ –†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞.\n\n‚úèÔ∏è –ß—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤.\n\nüåÖ –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ—Å–∫–æ–ª—å–∫–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–æ –æ–¥–Ω–æ–π, –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –∏—Ö —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.',
    Markup.keyboard([['üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç', '‚óÄÔ∏è –ù–∞–∑–∞–¥']])
  );
});

bot.hears('‚óÄÔ∏è –ù–∞–∑–∞–¥', async ctx => {
  const telegramId = ctx.from.id;
  try {
    await postService.deleteByCreatorId(telegramId);
    ctx.reply('–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω', Markup.removeKeyboard());
  } catch (error) {
    console.log(error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞');
  }
});

bot.hears('üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç', async ctx => {
  const telegramId = ctx.from.id;

  const post = await postService.getOne({ creatorTelegramId: telegramId });
  if (!post) return;

  if (!post.text && !post.fileIds)
    return ctx.reply(
      '–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–æ—Ç–æ'
    );

  if (!post.fileIds) {
    await ctx.reply(post.text);
  } else {
    const media: any = post.fileIds
      .trim()
      .split(' ')
      .map((id, index) => ({
        type: 'photo',
        media: id,
        caption: index === 0 ? post.text : '',
      }));

    await ctx.replyWithMediaGroup(media);
  }

  return ctx.reply(
    '–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?',
    Markup.inlineKeyboard([Markup.button.callback('–û—Ç–ø—Ä–∞–≤–∏—Ç—å', 'send')])
  );
});

bot.on('text', async ctx => {
  const telegramId = ctx.message.from.id;
  const user = await userService.getByTelegramId(telegramId);
  if (!user) return;

  const messageText = ctx.message.text;

  if (user.isAdmin) {
    savePostText(ctx, telegramId, messageText);
  }

  const step = user.step;

  if (step !== 'registered') {
    return saveUserRegisterAnswer(ctx, user, messageText);
  }

  const interview = user.interviews.find(
    interview =>
      !['closed', 'init', 'canceled', 'sended'].includes(interview.step)
  );

  if (interview) {
    return saveInterviewAnswer(ctx, interview, messageText);
  }

  return;
});

bot.on('photo', async ctx => {
  const telegramId = ctx.from.id;
  const post = await postService.getOne({ creatorTelegramId: telegramId });
  if (!post) return;

  const fileId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
  const newFilesList = post.fileIds + ' ' + fileId;
  await postService.update(telegramId, {
    fileIds: newFilesList,
  });
  return ctx.reply('–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
});

bot.action(/answer_[A-Za-z0-9]*_\w*/, async ctx => {
  const telegramId = ctx.from?.id;
  if (!telegramId) return ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');

  ctx.answerCbQuery();

  const actionsString = ctx.match[0];
  const [_, step, value] = actionsString.split('_');

  if (!step || !value) return;
  const question = registrationQuestions[step];
  if (!question) return;
  const nextStep = question.nextStep;

  const answerLabel =
    question.answers?.find(answer => answer.value === value)?.label || '';
  ctx.editMessageText(`–í–∞—à –≥–æ—Ä–æ–¥ -  _${answerLabel}_`, {
    parse_mode: 'Markdown',
  });
  try {
    await userService.update(telegramId, {
      [step]: value,
      step: nextStep,
    });
  } catch (error) {
    console.log(error);
    return ctx.reply(
      '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'
    );
  }

  const nextQuestion = registrationQuestions[nextStep];

  if (nextQuestion.answers) {
    const buttons = nextQuestion.answers.map(answer =>
      Markup.button.callback(answer.label, `answer_${nextStep}_${answer.value}`)
    );
    return ctx.reply(nextQuestion.label, Markup.inlineKeyboard(buttons));
  }
  return ctx.reply(nextQuestion.label);
});

bot.action('startInterview', async ctx => {
  ctx.answerCbQuery();
  const telegramId = ctx.from?.id;
  if (!telegramId) return;
  ctx.deleteMessage();

  const user = await userService.getByTelegramId(telegramId);
  if (!user) return;

  const interview = user.interviews.find(
    interview =>
      !['closed', 'init', 'canceled', 'sended'].includes(interview.step)
  );
  if (!interview) return;

  await interviewService.update(interview.id, {
    step: 'dish',
  });

  ctx.reply('–î–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–≤—å—é! –û—Ç–≤–µ—Ç—ã –æ—Ç 1 –¥–æ 10!!');
  console.log(interviewQuestions.dish.label);

  ctx.reply(interviewQuestions.dish.label);
});

bot.action('send', async ctx => {
  ctx.answerCbQuery();
  ctx.deleteMessage();
  const telegramId = ctx.from?.id;

  if (!telegramId) return;

  const post = await postService.getOne({ creatorTelegramId: telegramId });
  if (!post) return;

  const usersList = await userService.getAll({ step: 'registered' });
  let successMessagesCount = 0;
  if (post.fileIds) {
    successMessagesCount = await sendMediaMessage(
      usersList,
      post.fileIds,
      post.text
    );
  } else {
    successMessagesCount = await sendTextMessage(usersList, post.text);
  }

  await postService.deleteByCreatorId(telegramId);
  await ctx.reply(
    `–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–∏ ${successMessagesCount} ${getDeclensionWordByCount(
      successMessagesCount,
      ['–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è']
    )} –∏–∑  ${usersList.length}`,
    Markup.removeKeyboard()
  );
});

bot.action('register', async ctx => {
  ctx.answerCbQuery();
  ctx.editMessageText(HELLO_MESSAGE_TEXT);
  const telegramId = ctx.from?.id;
  const chatId = ctx.chat?.id;
  if (!telegramId) return;

  const checkUser = await userService.getByTelegramId(telegramId);
  if (!!checkUser) return;

  await userService.create({ telegramId, chatId, step: 'firstName' });
  const firstQuestion = registrationQuestions.firstName.label;
  return ctx.reply(firstQuestion);
});

async function sendTextMessage(usersList: User[], text: string) {
  const sendedMessagePromises = usersList.map(async user => {
    try {
      const res = await telegram.sendMessage(user.chatId, text);
      return res;
    } catch (error) {
      console.log(error);
      return;
    }
  });

  const sendedMessages = (await Promise.all(sendedMessagePromises)).filter(
    message => !!message
  );

  return sendedMessages.length;
}

async function sendMediaMessage(
  usersList: User[],
  fileIds: string,
  text: string
) {
  const media: any = fileIds
    .trim()
    .split(' ')
    .map((id, index) => ({
      type: 'photo',
      media: id,
      caption: index === 0 ? text : '',
    }));

  const sendedMessagePromises = usersList.map(async user => {
    try {
      const res = await telegram.sendMediaGroup(user.chatId, media);
      return res;
    } catch (error) {
      console.log(error);
      return;
    }
  });

  const sendedMessages = (await Promise.all(sendedMessagePromises)).filter(
    message => !!message
  );

  return sendedMessages.length;
}

async function validateStep(
  stepName: string,
  answer: string
): Promise<ValidationResult> {
  switch (stepName) {
    case 'dateOfBirth':
      return validateDateOfBirth(answer);
    case 'phoneNumber':
      const user = await userService.findOneByPhone(answer);
      if (!user) return validatePhoneNumber(answer);
      return {
        status: 'error',
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!',
      };
    default:
      return {
        status: 'success',
        message: '',
      };
  }
}

async function setCardToUser(userId: number) {
  try {
    return await userService.setCard(userId);
  } catch (error) {
    console.log(`–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
  }
  return;
}

async function savePostText(ctx: Context, telegramId: number, text: string) {
  const post = await postService.getOne({ creatorTelegramId: telegramId });
  if (post) {
    await postService.update(telegramId, {
      text,
    });
    ctx.reply('–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω');
  }
}

async function saveInterviewAnswer(
  ctx: Context,
  interview: Interview,
  answer: string
) {
  const step = interview.step;
  const nextInterviewStep = interviewQuestions[step].nextStep;
  await interviewService.update(interview.id, {
    [step]: answer,
    step: nextInterviewStep,
  });
  if (nextInterviewStep === 'closed') {
    return ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ú—ã —É—á—Ç–µ–º –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!');
  }
  return ctx.reply(interviewQuestions[nextInterviewStep].label);
}

async function saveUserRegisterAnswer(
  ctx: Context,
  user: User,
  answer: string
) {
  const step = user.step;
  const telegramId = user.telegramId;
  const question = registrationQuestions[step];

  if (question.answers) return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞';

  const validationResult = await validateStep(step, answer);

  if (validationResult.status !== 'success') {
    return validationResult.message;
  }

  if (!question) {
    console.error(
      `–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ ${step}`
    );
    return '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É';
  }

  const nextStep = question.nextStep;

  if (!nextStep) {
    console.error(
      `–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–∞–ø –ø–æ—Å–ª–µ ${step}`
    );
    return '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É';
  }

  try {
    await userService.update(telegramId, {
      [step]: answer,
      step: nextStep,
    });
  } catch (error) {
    console.log(error);
    return '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É';
  }

  if (nextStep === 'registered') {
    return registerUserInIIko(ctx, user);
  }

  const nextQuestion = registrationQuestions[nextStep];

  if (nextQuestion.answers) {
    const buttons = nextQuestion.answers.map(answer =>
      Markup.button.callback(answer.label, `answer_${nextStep}_${answer.value}`)
    );
    return ctx.reply(nextQuestion.label, Markup.inlineKeyboard(buttons));
  }
  return ctx.reply(nextQuestion.label);
}

async function registerUserInIIko(ctx: Context, user: User) {
  const loadingMessage = await ctx.reply(
    '–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ...'
  );
  try {
    const updatedUser = await setCardToUser(user.id);
    if (!updatedUser)
      return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–∞—Ä—Ç—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É';
    const newUserData: CreateUserDto = {
      name: updatedUser.firstName,
      surName: updatedUser.secondName,
      cardNumber: updatedUser.card.cardNumber,
      cardTrack: updatedUser.card.cardTrack,
      phone: updatedUser.phoneNumber,
      birthday: formatDateToIiko(updatedUser.dateOfBirth),
      sex: SEX.NOT_SPECIFIED,
      consentStatus: ConsentStatus.GIVEN,
    };
    const iikoUserId = await iikoApi.createUser(newUserData);
    if (!iikoUserId) {
      throw new Error(
        `–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ iiko –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.telegramId}`
      );
    }
    await userService.update(updatedUser.telegramId, {
      iikoId: iikoUserId,
    });

    const iikoBalance = await iikoApi.getUserBalance(iikoUserId);

    await userService.update(user.telegramId, {
      balance: iikoBalance,
    });
    ctx.deleteMessage(loadingMessage.message_id);
    return ctx.reply(
      END_REGISTRATION_TEXT,
      Markup.keyboard([[SHOW_BALANCE_TEXT, SPEND_TEXT]])
        .oneTime()
        .resize()
    );
  } catch (error) {
    console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.telegramId}`);
    ctx.deleteMessage(loadingMessage.message_id);
    return ctx.reply(
      '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ–Ω—É—Å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'
    );
  }
}

async function showBalance(ctx: Context) {
  const telegramId = ctx.from?.id;
  if (!telegramId) return;

  const user = await userService.getByTelegramId(telegramId);
  if (!user || user.step !== 'registered')
    return ctx.reply(
      '–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –±–∞–ª–∞–Ω—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.'
    );

  const messageId = (await ctx.reply('–ó–∞–≥—Ä—É–∑–∫–∞...')).message_id;

  const balance = await iikoApi.getUserBalance(user.iikoId);
  if (!balance && balance !== 0) {
    return ctx.reply(
      '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'
    );
  }

  await ctx.deleteMessage(messageId);

  return ctx.replyWithMarkdown(
    `–°–µ–π—á–∞—Å –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ: _${balance} ${getDeclensionWordByCount(
      user.balance,
      ['–±–∞–ª–ª–æ–≤', '–±–∞–ª–ª', '–±–∞–ª–ª–∞']
    )}_.`
  );
}

async function sendBarCode(ctx: Context) {
  const telegramId = ctx.from?.id;

  if (!telegramId) return;

  const messageId = (await ctx.reply('–ó–∞–≥—Ä—É–∑–∫–∞...')).message_id;

  const user = await userService.getByTelegramId(telegramId);
  if (!user || user.step !== 'registered') {
    ctx.deleteMessage(messageId);
    return ctx.reply('–î–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–ª–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è');
  }

  await userService.update(telegramId, {
    lastOrderDate: new Date(),
  });

  try {
    await ctx.replyWithPhoto(
      [process.env.PUBLIC_URL, user.card.barCodeLink].join('/'),
      {
        caption: `–û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ–±—ã —Å–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã, –ø–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç –±–∞—Ä-–∫–æ–¥ –≤–∞—à–µ–º—É –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—É.`,
      }
    );
  } catch (error) {
    console.log(error);
    ctx.deleteMessage(messageId);
    ctx.reply(
      `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —à—Ç—Ä–∏—Ö-–∫–æ–¥ –∫–∞—Ä—Ç—ã.\n\n–ù–æ–º–µ—Ä –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã: ${user.card.cardNumber}`
    );
  } finally {
    return ctx.deleteMessage(messageId);
  }
}
