import { Markup, Telegraf, Telegram } from 'telegraf';
import { questions } from './questions';
import { userService } from '../../common/services/user.service';
import { validateDateOfBirth } from '../../helpers/dobValidator';
import { validatePhoneNumber } from '../../helpers/phoneValidation';
import { ValidationResult } from '../../@types/entities/ValidationResult';

import dotenv from 'dotenv';
import { getDeclensionWordByCount } from '../../helpers/wordHelper';
import { postService } from '../../common/services/post.service';
import { User } from '../../common/entities/User';
import axios from 'axios';
import { AuthToken } from '../../@types/dto/auth/authToken';
import { OrganizationsResponseDto } from '../../@types/dto/organization/response';
import { IikoUser } from '../../@types/entities/IikoUser';
dotenv.config();

const userToken = process.env.USER_BOT_TOKEN;

if (!userToken) {
  throw new Error('USER_BOT_TOKEN must be provided!');
}

export const bot = new Telegraf(userToken);
const telegram = new Telegram(userToken);

const HELLO_MESSAGE_TEXT =
  '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç Est. 1993.\n\n–≠—Ç–æ –±–æ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏. –° –µ–≥–æ –ø–æ–º–æ—â—å—é –≤—ã —Å–º–æ–∂–µ—Ç–µ –∫–æ–ø–∏—Ç—å –±–∞–ª–ª—ã –∏ —Ç—Ä–∞—Ç–∏—Ç—å –∏—Ö –Ω–∞ –Ω–∞—à–∏ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ —Ö–æ—Ç-–¥–æ–≥–∏.\n\n–ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å. –≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ –±–æ–ª—å—à–µ –¥–≤—É—Ö –º–∏–Ω—É—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.';
const END_REGISTRATION_TEXT =
  '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!\n\n–ú—ã —É–∂–µ –Ω–∞—á–∏—Å–ª–∏–ª–∏ 200 –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –Ω–∞ –≤–∞—à —Å—á—ë—Ç. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∫–æ–ø–∏—Ç—å –∏ —Ç—Ä–∞—Ç–∏—Ç—å –∏—Ö –≤ Est. 1993.\n\n–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å¬ª.';
const SHOW_BALANCE_TEXT = 'üí∞ –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å';
const SPEND_TEXT = 'üí≥ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–ª–ª—ã';

bot.hears(SHOW_BALANCE_TEXT, showBalance);
bot.command('balance', showBalance);

bot.hears(SPEND_TEXT, spend);
bot.command('spend', spend);

bot.command('/test', async ctx => {
  const telegramId = ctx.from.id;
  const user = await userService.getByTelegramId(telegramId);
  if (!user) return;

  const authToken = await getAuthToken();
  if (!authToken) return;
  console.log(authToken);
  const organizationId = await getOrganizationId(authToken);
  console.log(organizationId);
  if (!organizationId) return;
  const iikoUser = await getCustomerInfo(
    authToken,
    organizationId,
    user.iikoId
  );
  console.log(iikoUser?.walletBalances[0]);

  return;
});

bot.command('/add', async ctx => {
  const telegramId = ctx.from.id;
  const user = await userService.getByTelegramId(telegramId);
  if (!user) return;
  const authToken = await getAuthToken();
  if (!authToken) return;
  const organizationId = await getOrganizationId(authToken);
  if (!organizationId) return;
  try {
    const response = await axios.post(
      'https://api-ru.iiko.services/api/1/loyalty/iiko/customer/wallet/hold',
      {
        customerId: user.iikoId,
        walletId: '01330000-6bec-ac1f-706b-08da7721127c',
        sum: 200,
        organizationId,
      },
      {
        headers: { Authorization: `Bearer ${authToken}` },
      }
    );
  } catch (error) {
    console.log(error);
  }
});

bot.start(async ctx => {
  const telegramId = ctx.message.from.id;
  const user = await userService.getByTelegramId(telegramId);
  if (!user) {
    return ctx.reply(
      HELLO_MESSAGE_TEXT,
      Markup.inlineKeyboard([
        Markup.button.callback('–î–∞–≤–∞–π—Ç–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã', 'register'),
      ])
    );
  }

  if (user.step !== 'registered') {
    return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é');
  }

  return ctx.reply(
    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ hot-not! ',
    Markup.keyboard([[SHOW_BALANCE_TEXT, SPEND_TEXT]])
      .oneTime()
      .resize()
  );
});

bot.command('delete', async ctx => {
  const telegramId = ctx.message.from.id;
  try {
    await userService.delete(telegramId);
    ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã', Markup.removeKeyboard());
  } catch (error) {
    console.log(error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
  }
});

bot.command('/registerAdmin', async ctx => {
  if (ctx.message.text.slice(14).trim() !== process.env.POST_PASSWORD) {
    return;
  }

  const telegramId = ctx.from.id;

  try {
    await userService.update(telegramId, {
      canCratePosts: true,
    });
    return ctx.reply(
      '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /createPost'
    );
  } catch (error) {
    console.log(error);
    return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–æ–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏');
  }
});

bot.command('/createPost', async ctx => {
  const telegramId = ctx.from.id;

  const user = await userService.getByTelegramId(telegramId);
  if (!user || !user.canCratePosts) return;

  const postsList = await postService.getAll({
    creatorTelegramId: telegramId,
  });

  await Promise.all(
    postsList.map(async post => await postService.delete(post.id))
  );

  await postService.create({
    creatorTelegramId: telegramId,
    fileIds: '',
  });

  return ctx.reply(
    'üì¢ –†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞.\n\n‚úèÔ∏è –ß—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤.\n\nüåÖ –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ—Å–∫–æ–ª—å–∫–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–æ –æ–¥–Ω–æ–π, –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –∏—Ö —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.',
    Markup.keyboard([['üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç', '‚óÄÔ∏è –ù–∞–∑–∞–¥']])
  );
});

bot.hears('‚óÄÔ∏è –ù–∞–∑–∞–¥', async ctx => {
  const telegramId = ctx.from.id;
  try {
    await postService.deleteByCreatorId(telegramId);
    ctx.reply('–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω', Markup.removeKeyboard());
  } catch (error) {
    console.log(error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞');
  }
});

bot.hears('üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç', async ctx => {
  const telegramId = ctx.from.id;

  const post = await postService.getOne({ creatorTelegramId: telegramId });
  if (!post) return;

  if (!post.text && !post.fileIds)
    return ctx.reply(
      '–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–æ—Ç–æ'
    );

  if (!post.fileIds) {
    await ctx.reply(post.text);
  } else {
    const media: any = post.fileIds
      .trim()
      .split(' ')
      .map((id, index) => ({
        type: 'photo',
        media: id,
        caption: index === 0 ? post.text : '',
      }));

    await ctx.replyWithMediaGroup(media);
  }

  return ctx.reply(
    '–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?',
    Markup.inlineKeyboard([Markup.button.callback('–û—Ç–ø—Ä–∞–≤–∏—Ç—å', 'send')])
  );
});

bot.on('text', async ctx => {
  const telegramId = ctx.message.from.id;
  const user = await userService.getByTelegramId(telegramId);
  if (!user) return;

  if (user.canCratePosts) {
    const post = await postService.getOne({ creatorTelegramId: telegramId });
    if (post) {
      await postService.update(telegramId, {
        text: ctx.message.text,
      });
      return ctx.reply('–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω');
    }
  }

  const step = user.step;
  if (step === 'registered') {
    return;
  }
  const answer = ctx.message.text;
  const question = questions[step];

  const validationResult = await validateStep(step, answer);

  if (validationResult.status !== 'success') {
    return ctx.reply(validationResult.message);
  }

  if (!question) {
    console.error(
      `–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ ${step}`
    );
    return ctx.reply('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
  }

  const nextStep = question.nextStep;

  if (!nextStep) {
    console.error(
      `–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–∞–ø –ø–æ—Å–ª–µ ${step}`
    );
    return ctx.reply('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
  }

  try {
    await userService.update(telegramId, {
      [step]: answer,
      step: nextStep,
    });
  } catch (error) {
    console.log(error);
    return ctx.reply(
      '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'
    );
  }

  if (nextStep === 'registered') {
    await userService.setCard(user.id);
    await userService.update(telegramId, { balance: 200 });
    const updatedUser = await userService.getByTelegramId(telegramId);
    if (!updatedUser) return;
    const authToken = await getAuthToken();
    if (!authToken) return;
    const organizationId = await getOrganizationId(authToken);
    const userData: Partial<IikoUser> = {
      name: updatedUser.firstName,
      surName: updatedUser.secondName,
      cardNumber: updatedUser.card.cardNumber,
      cardTrack: updatedUser.card.cardTrack,
      phone: updatedUser.phoneNumber,
      organizationId,
    };
    const iikoUserId = await createOrUpdateIikoUser(authToken, userData);
    if (!iikoUserId) return;
    await userService.update(telegramId, {
      iikoId: iikoUserId.id,
    });
    console.log(iikoUserId);
    await ctx.reply('‚úÖ –°–∫–∏–¥–æ—á–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞');
    await ctx.reply(
      '‚ùóÔ∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å iiko –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü–æ –ø–ª–∞–Ω—É –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∫–∞—Ä—Ç–∞. –¢–µ–ø–µ—Ä—å –≤—Å–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ iiko –∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å.\n\nP.S. –°–µ–π—á–∞—Å –æ–Ω –∑–∞–º–æ–∫–∞–Ω'
    );
    return ctx.reply(
      END_REGISTRATION_TEXT,
      Markup.keyboard([[SHOW_BALANCE_TEXT, SPEND_TEXT]])
        .oneTime()
        .resize()
    );
  }

  return ctx.reply(questions[nextStep].label);
});

bot.command('add', async ctx => {
  const authToken = await getAuthToken();
  if (!authToken) return;
  const organizationId = await getOrganizationId(authToken);
  console.log(organizationId);
});

bot.on('photo', async ctx => {
  const telegramId = ctx.from.id;
  const post = await postService.getOne({ creatorTelegramId: telegramId });
  if (!post) return;

  const fileId = ctx.message.photo[ctx.message.photo.length - 1].file_id;
  const newFilesList = post.fileIds + ' ' + fileId;
  await postService.update(telegramId, {
    fileIds: newFilesList,
  });
  return ctx.reply('–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
});

bot.action('send', async ctx => {
  ctx.answerCbQuery();
  ctx.deleteMessage();
  const telegramId = ctx.from?.id;

  if (!telegramId) return;

  const post = await postService.getOne({ creatorTelegramId: telegramId });
  if (!post) return;

  const usersList = await userService.getAll({ step: 'registered' });
  let successMessagesCount = 0;
  if (post.fileIds) {
    successMessagesCount = await sendMediaMessage(
      usersList,
      post.fileIds,
      post.text
    );
  } else {
    successMessagesCount = await sendTextMessage(usersList, post.text);
  }

  await postService.deleteByCreatorId(telegramId);
  await ctx.reply(
    `–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–∏ ${successMessagesCount} ${getDeclensionWordByCount(
      successMessagesCount,
      ['–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è']
    )} –∏–∑  ${usersList.length}`,
    Markup.removeKeyboard()
  );
});

bot.action('register', async ctx => {
  ctx.answerCbQuery();
  ctx.editMessageText(HELLO_MESSAGE_TEXT);
  const telegramId = ctx.from?.id;
  const chatId = ctx.chat?.id;
  if (!telegramId) return;

  const checkUser = await userService.getByTelegramId(telegramId);
  if (!!checkUser) return;

  await userService.create({ telegramId, chatId, step: 'firstName' });
  const firstQuestion = questions.firstName.label;
  return ctx.reply(firstQuestion);
});

async function sendTextMessage(usersList: User[], text: string) {
  const sendedMessagePromises = usersList.map(async user => {
    try {
      const res = await telegram.sendMessage(user.chatId, text);
      return res;
    } catch (error) {
      console.log(error);
      return;
    }
  });

  const sendedMessages = (await Promise.all(sendedMessagePromises)).filter(
    message => !!message
  );

  return sendedMessages.length;
}

async function sendMediaMessage(
  usersList: User[],
  fileIds: string,
  text: string
) {
  const media: any = fileIds
    .trim()
    .split(' ')
    .map((id, index) => ({
      type: 'photo',
      media: id,
      caption: index === 0 ? text : '',
    }));

  const sendedMessagePromises = usersList.map(async user => {
    try {
      const res = await telegram.sendMediaGroup(user.chatId, media);
      return res;
    } catch (error) {
      console.log(error);
      return;
    }
  });

  const sendedMessages = (await Promise.all(sendedMessagePromises)).filter(
    message => !!message
  );

  return sendedMessages.length;
}

async function validateStep(
  stepName: string,
  answer: string
): Promise<ValidationResult> {
  switch (stepName) {
    case 'dateOfBirth':
      return validateDateOfBirth(answer);
    case 'phoneNumber':
      const user = await userService.findOneByPhone(answer);
      if (!user) return validatePhoneNumber(answer);
      return {
        status: 'error',
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!',
      };
    default:
      return {
        status: 'success',
        message: '',
      };
  }
}

async function showBalance(ctx: any) {
  const telegramId = ctx.message.from.id;
  const user = await userService.getByTelegramId(telegramId);
  if (!user || user.step !== 'registered')
    return ctx.reply(
      '–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –±–∞–ª–∞–Ω—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.'
    );
  return ctx.replyWithMarkdown(
    `–°–µ–π—á–∞—Å –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ: _${user.balance} ${getDeclensionWordByCount(
      user.balance,
      ['–±–∞–ª–ª–æ–≤', '–±–∞–ª–ª', '–±–∞–ª–ª–∞']
    )}_.`
  );
}

async function getAuthToken() {
  try {
    const response = await axios.post(
      'https://api-ru.iiko.services/api/1/access_token',
      {
        apiLogin: 'ae6300eb-be2',
      }
    );
    const authData = response.data as AuthToken;
    return authData.token;
  } catch (error) {
    console.log(error);
    return;
  }
}

async function getOrganizationId(authToken: string) {
  try {
    const response = await axios.post(
      'https://api-ru.iiko.services/api/1/organizations',
      {
        returnAdditionalInfo: false,
        includeDisabled: false,
      },
      {
        headers: { Authorization: `Bearer ${authToken}` },
      }
    );
    const data = response.data as OrganizationsResponseDto;
    return data.organizations[0].id;
  } catch (error) {
    console.log(error);
    return;
  }
}

async function createOrUpdateIikoUser(
  authToken: string,
  user: Partial<IikoUser>
) {
  try {
    const response = await axios.post(
      'https://api-ru.iiko.services/api/1/loyalty/iiko/customer/create_or_update',
      user,
      {
        headers: { Authorization: `Bearer ${authToken}` },
      }
    );
    return response.data as { id: string };
  } catch (error) {
    console.log(error);
    return;
  }
}

async function getCustomerInfo(
  authToken: string,
  organizationId: string,
  id: string
) {
  try {
    const response = await axios.post(
      'https://api-ru.iiko.services/api/1/loyalty/iiko/customer/info',
      {
        type: 'id',
        id,
        organizationId,
      },
      {
        headers: { Authorization: `Bearer ${authToken}` },
      }
    );
    return response.data as IikoUser;
  } catch (error) {
    console.log(error);
    return;
  }
}

async function spend(ctx: any) {
  const telegramId = ctx.message.from.id;
  const user = await userService.getByTelegramId(telegramId);
  if (!user || user.step !== 'registered')
    return ctx.reply('–î–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–ª–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è');
  return ctx.replyWithPhoto(
    'https://images.unsplash.com/photo-1573865526739-10659fec78a5?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=830&q=80',
    {
      caption: `–û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ–±—ã —Å–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã, –ø–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç –±–∞—Ä-–∫–æ–¥ –≤–∞—à–µ–º—É –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—É.`,
    }
  );
}
