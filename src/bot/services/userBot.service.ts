import { Context, Markup, Telegram } from 'telegraf';
import {
  ConsentStatus,
  CreateUserDto,
  SEX,
} from '../../@types/dto/user/create.dto';
import { ValidationResult } from '../../@types/entities/ValidationResult';
import { iikoApi } from '../../api/iikoApi';
import { Interview } from '../../common/entities/Interview';
import { User } from '../../common/entities/User';
import { interviewService } from '../../common/services/interview.service';
import { postService } from '../../common/services/post.service';
import { userService } from '../../common/services/user.service';
import { clientButtons } from '../../constants/buttons';
import { interviewQuestions } from '../../constants/interviewQuestions';
import { registrationQuestions } from '../../constants/registrationQuestions';
import { validateDateOfBirth } from '../../helpers/dobValidator';
import { formatDateToIiko } from '../../helpers/formatDate';
import { validatePhoneNumber } from '../../helpers/phoneValidation';
import { validateNumber } from '../../helpers/validateNumber';
import { getDeclensionWordByCount } from '../../helpers/wordHelper';
import { generateXls } from '../../scripts/createInterviewsXls';

const userToken = process.env.USER_BOT_TOKEN;

if (!userToken) {
  throw new Error('USER_BOT_TOKEN must be provided!');
}

const END_REGISTRATION_TEXT =
  '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É –Ω–∞—Å—Ç–æ—è—â–∏—Ö –≥–µ–¥–æ–Ω–∏—Å—Ç–æ–≤! –î–∞—Ä–∏–º –≤–∞–º 200 –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤. –û–ø–ª–∞—á–∏–≤–∞–π—Ç–µ –∏–º–∏ 50% –æ—Ç –≤–∞—à–µ–≥–æ —á–µ–∫–∞! üî•\n\n–ö—Å—Ç–∞—Ç–∏, –∑–∞–±—ã–ª–∏ —Å–∫–∞–∑–∞—Ç—å, –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–æ–ª–∏–∫–∞ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É ¬´eat in est¬ª  –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–µ—Ç –∏–∑ –Ω–∞—à–∏—Ö –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã—Ö —Ç–∞–ø–∞—Å–æ–≤! –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ –ø–æ –Ω–æ–º–µ—Ä–∞–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —Ç—É—Ç üëáüèº\n\nEst1993.ru';

class UserBotService {
  telegram: Telegram;
  constructor(private userToken: string) {
    this.telegram = new Telegram(userToken);
  }

  async sendTextMessage(usersList: User[], text: string) {
    const sendedMessagePromises = usersList.map(async (user) => {
      try {
        const res = await this.telegram.sendMessage(user.chatId, text);
        return res;
      } catch (error) {
        console.log(error);
        return;
      }
    });

    const sendedMessages = (await Promise.all(sendedMessagePromises)).filter(
      (message) => !!message,
    );

    return sendedMessages.length;
  }

  async sendMediaMessage(usersList: User[], fileIds: string, text: string) {
    const media: any = fileIds
      .trim()
      .split(' ')
      .map((id, index) => ({
        type: 'photo',
        media: id,
        caption: index === 0 ? text : '',
      }));

    const sendedMessagePromises = usersList.map(async (user) => {
      try {
        const res = await this.telegram.sendMediaGroup(user.chatId, media);
        return res;
      } catch (error) {
        console.log(error);
        return;
      }
    });

    const sendedMessages = (await Promise.all(sendedMessagePromises)).filter(
      (message) => !!message,
    );

    return sendedMessages.length;
  }

  async validateStep(
    stepName: string,
    answer: string,
  ): Promise<ValidationResult> {
    switch (stepName) {
      case 'dateOfBirth':
        return validateDateOfBirth(answer);
      case 'phoneNumber':
        const user = await userService.findOneByPhone(answer);
        if (!user) return validatePhoneNumber(answer);
        return {
          status: 'error',
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!',
        };
      default:
        return {
          status: 'success',
          message: '',
        };
    }
  }

  async setCardToUser(userId: number) {
    try {
      return await userService.setCard(userId);
    } catch (error) {
      console.log(`–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
    }
    return;
  }

  async savePostText(ctx: Context, telegramId: number, text: string) {
    const post = await postService.getOne({ creatorTelegramId: telegramId });
    if (post) {
      await postService.update(telegramId, {
        text,
      });
      ctx.reply('–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω');
    }
  }

  async saveInterviewAnswer(
    ctx: Context,
    interview: Interview,
    answer: string,
  ) {
    const step = interview.step;
    const nextInterviewStep = interviewQuestions[step].nextStep;
    const numberAnswer = +answer;

    const validationResult = validateNumber(numberAnswer);

    if (validationResult.status === 'error') {
      return ctx.reply(validationResult.message);
    }

    await interviewService.update(interview.id, {
      [step]: answer,
      step: nextInterviewStep,
    });
    if (nextInterviewStep === 'closed') {
      return ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ú—ã —É—á—Ç–µ–º –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!');
    }
    return ctx.reply(interviewQuestions[nextInterviewStep].label);
  }

  async saveUserRegisterAnswer(ctx: Context, user: User, answer: string) {
    const step = user.step;
    const telegramId = user.telegramId;
    const question = registrationQuestions[step];

    if (question.answers) return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞';

    const validationResult = await this.validateStep(step, answer);

    if (validationResult.status !== 'success') {
      return ctx.reply(validationResult.message);
    }

    if (!question) {
      console.error(
        `–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ ${step}`,
      );
      return '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É';
    }

    const nextStep = question.nextStep;

    if (!nextStep) {
      console.error(
        `–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–∞–ø –ø–æ—Å–ª–µ ${step}`,
      );
      return '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É';
    }

    try {
      await userService.update(telegramId, {
        [step]: answer,
        step: nextStep,
      });
    } catch (error) {
      console.log(error);
      return '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É';
    }

    if (nextStep === 'registered') {
      return this.registerUserInIIko(ctx, user);
    }

    const nextQuestion = registrationQuestions[nextStep];

    if (nextQuestion.answers) {
      const buttons = nextQuestion.answers.map((answer) =>
        Markup.button.callback(
          answer.label,
          `answer_${nextStep}_${answer.value}`,
        ),
      );
      return ctx.reply(nextQuestion.label, Markup.inlineKeyboard(buttons));
    }
    return ctx.reply(nextQuestion.label);
  }

  async registerUserInIIko(ctx: Context, user: User) {
    const loadingMessage = await ctx.reply(
      '–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ –±–æ–Ω—É—Å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ...',
    );
    try {
      const updatedUser = await this.setCardToUser(user.id);
      if (!updatedUser)
        return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–∞—Ä—Ç—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É';
      const newUserData: CreateUserDto = {
        name: updatedUser.firstName,
        surName: updatedUser.secondName,
        cardNumber: updatedUser.card.cardNumber,
        cardTrack: updatedUser.card.cardTrack,
        phone: updatedUser.phoneNumber,
        birthday: formatDateToIiko(updatedUser.dateOfBirth),
        sex: SEX.NOT_SPECIFIED,
        consentStatus: ConsentStatus.GIVEN,
      };
      const iikoUserId = await iikoApi.createUser(newUserData);
      if (!iikoUserId) {
        throw new Error(
          `–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ iiko –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.telegramId}`,
        );
      }
      await userService.update(updatedUser.telegramId, {
        iikoId: iikoUserId,
      });

      const iikoBalance = await iikoApi.getUserBalance(iikoUserId);

      await userService.update(user.telegramId, {
        balance: iikoBalance,
      });
      ctx.deleteMessage(loadingMessage.message_id);
      return ctx.reply(END_REGISTRATION_TEXT, clientButtons);
    } catch (error) {
      console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.telegramId}`);
      ctx.deleteMessage(loadingMessage.message_id);
      return ctx.reply(
        '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ–Ω—É—Å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É',
      );
    }
  }

  async getCityStats(ctx: Context) {
    const telegramId = ctx.from?.id;
    if (!telegramId) return;

    const user = await userService.getByTelegramId(telegramId);
    if (!user?.isAdmin) return;

    const loaderMsg = await ctx.reply('–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');

    const stats = await userService.getCityStats();

    ctx.deleteMessage(loaderMsg.message_id);

    return ctx.reply(
      `–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ ‚Äî ${stats.total}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ú–æ—Å–∫–≤—ã ‚Äî ${stats.msk}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞ ‚Äî ${stats.spb}`,
    );
  }

  async getXlsFile(ctx: Context) {
    const telegramId = ctx.from?.id;
    if (!telegramId) return;
    const user = await userService.getByTelegramId(telegramId);
    if (!user || !user.isAdmin) return;
    const loader = await ctx.reply('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª...');
    const result = await generateXls('interviews');
    ctx.deleteMessage(loader.message_id);
    if (result.status === 'error') {
      ctx.reply(result.message);
    }
    try {
      await ctx.replyWithDocument(
        [process.env.PUBLIC_URL, 'interviews.zip'].join('/'),
      );
    } catch (error) {
      console.log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—Ä—Ö–∏–≤–∞', error);
      ctx.reply('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞');
    }
  }

  async createPost(ctx: Context) {
    const telegramId = ctx.from?.id;

    if (!telegramId) return;

    const user = await userService.getByTelegramId(telegramId);
    if (!user || !user.isAdmin) return;

    const postsList = await postService.getAll({
      creatorTelegramId: telegramId,
    });

    await Promise.all(
      postsList.map(async (post) => await postService.delete(post.id)),
    );

    await postService.create({
      creatorTelegramId: telegramId,
      fileIds: '',
    });

    return ctx.reply(
      'üì¢ –†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞.\n\n‚úèÔ∏è –ß—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤.\n\nüåÖ –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ï—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ—Å–∫–æ–ª—å–∫–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–æ –æ–¥–Ω–æ–π, –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –∏—Ö —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.',
      Markup.keyboard([['üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç', '‚óÄÔ∏è –ù–∞–∑–∞–¥']]),
    );
  }

  async showBalance(ctx: Context) {
    const telegramId = ctx.from?.id;
    if (!telegramId) return;

    const user = await userService.getByTelegramId(telegramId);
    if (!user || user.step !== 'registered')
      return ctx.reply(
        '–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –±–∞–ª–∞–Ω—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.',
      );

    const messageId = (await ctx.reply('–ó–∞–≥—Ä—É–∑–∫–∞...')).message_id;

    const balance = await iikoApi.getUserBalance(user.iikoId);
    if (!balance && balance !== 0) {
      return ctx.reply(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É',
      );
    }

    await ctx.deleteMessage(messageId);

    return ctx.replyWithMarkdown(
      `–°–µ–π—á–∞—Å –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ: _${balance} ${getDeclensionWordByCount(
        user.balance,
        ['–±–∞–ª–ª–æ–≤', '–±–∞–ª–ª', '–±–∞–ª–ª–∞'],
      )}_.`,
    );
  }

  async sendBarCode(ctx: Context) {
    const telegramId = ctx.from?.id;

    if (!telegramId) return;

    const messageId = (await ctx.reply('–ó–∞–≥—Ä—É–∑–∫–∞...')).message_id;

    const user = await userService.getByTelegramId(telegramId);
    if (!user || user.step !== 'registered') {
      ctx.deleteMessage(messageId);
      return ctx.reply('–î–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–ª–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è');
    }

    await userService.update(telegramId, {
      lastOrderDate: new Date(),
    });

    try {
      await ctx.replyWithPhoto(
        [process.env.PUBLIC_URL, user.card.barCodeLink].join('/'),
        {
          caption: `–û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ–±—ã —Å–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã, –ø–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç –±–∞—Ä-–∫–æ–¥ –≤–∞—à–µ–º—É –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—É.`,
        },
      );
    } catch (error) {
      console.log(error);
      ctx.deleteMessage(messageId);
      ctx.reply(
        `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —à—Ç—Ä–∏—Ö-–∫–æ–¥ –∫–∞—Ä—Ç—ã.\n\n–ù–æ–º–µ—Ä –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã: ${user.card.cardNumber}`,
      );
    } finally {
      return ctx.deleteMessage(messageId);
    }
  }
}

export const userBotService = new UserBotService(userToken);
